buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["PosThermalPrinter_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

plugins {
    id 'org.jetbrains.kotlinx.kover' version '0.7.5'
}


def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
// apply plugin: 'jacoco'

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["PosThermalPrinter_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["PosThermalPrinter_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.posthermalprinter"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

  }

    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            testCoverageEnabled true
        }
    }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  // testOptions {
  //     unitTests {
  //         includeAndroidResources = true
  //         returnDefaultValues = true
  //         all {
  //             jacoco {
  //                 includeNoLocationClasses = true
  //                 excludes = ['jdk.internal.*']
  //             }
  //         }
  //     }
  // }

   testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

// jacoco {
//     toolVersion = "0.8.11"
// }

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation files('libs/PosPrinterSDK.jar')

  // Test dependencies
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.mockito:mockito-core:4.8.1'
  testImplementation 'org.mockito:mockito-inline:4.8.1'
  testImplementation 'org.robolectric:robolectric:4.11.1'
  testImplementation 'androidx.test:core:1.5.0'
  testImplementation 'org.mockito.kotlin:mockito-kotlin:4.1.0'
  testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
  testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
}

// Add this to your build.gradle
tasks.register('coverageReport') {
    dependsOn 'koverHtmlReportDebug'
    dependsOn 'koverXmlReportDebug'
}


kover {
    htmlReport {
        reportDir.set(layout.buildDirectory.dir("reports/kover/html"))
        filters {
            excludes {
                classes(
                    "*.BuildConfig",
                    "*.R",
                    "*.R\$*"
                )
            }
        }
    }
    
    xmlReport {
        reportFile.set(layout.buildDirectory.file("reports/kover/report.xml"))
    }

    verify {
        rule {
            bound {
                minValue = 0  // Minimum coverage percentage
                valueType = 'LINE'
            }
        }
    }
}